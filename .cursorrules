# Codebase Overview

This codebase implements the **CodeActAgent** framework, an agent designed to perform tasks by executing code. The agent can **converse** with humans and **execute** Linux `bash` commands or Python code using an interactive Python interpreter.

## Main Components

- **AgentHub**: Contains agents such as `CodeActAgent` and specialized agents like `CodeActSWEAgent`. Agents are responsible for deciding the next action based on the current state.
- **Controller**: Manages the agent's state and execution flow via the `AgentController`.
- **LLM Interface**: Interacts with large language models to generate responses and actions.
- **Runtime**: Executes the code generated by the agent, including commands and file operations, often inside a sandboxed environment like Docker.
- **Events**: Defines actions and observations used for communication between components through an `EventStream`.
- **Utils**: Provides utility functions such as prompt management and micro-agent handling.
- **Plugins**: Extends agent capabilities, like browsing or Jupyter notebook functionalities.
- **State**: Represents the current state of the agent's task, including history and configurations.

## Architecture

- **Agent**: The central component that observes the state and decides on the next action. Agents are implemented following the `Agent` abstract class.
- **State**: Maintains the agent's history, inputs, and configuration. It is serialized for persistence.
- **LLM Interaction**: The agent uses the LLM to generate responses and actions based on prompts and the current state.
- **Event Stream**: Actions and observations are communicated through events, allowing for asynchronous processing and loose coupling between components.
- **Runtime/Sandbox**: Provides a secure environment for executing code, typically using Docker containers or other sandboxing techniques.

## Execution Flow

1. **Initialization**: The `AgentController` initializes the `CodeActAgent` with the specified configuration and sets up the `State` and `EventStream`.
2. **Planning**: The agent generates an execution plan and seeks user approval if necessary.
3. **Action Execution**: Upon approval, the agent executes steps by generating actions based on the current state and LLM outputs.
4. **Runtime Execution**: The `Runtime` component executes these actions (e.g., running code, editing files) and generates observations.
5. **Iteration**: The agent processes observations and decides on subsequent actions until the task is completed or the agent is finished.

## Code Structure and Conventions

- **Code Organization**: The codebase is organized into modules corresponding to their functionality, e.g., `agenthub`, `controller`, `llm`, `runtime`, `events`, `utils`, and `plugins`.

- **Agents**: All agents inherit from the `Agent` abstract class defined in `openhands/controller/agent.py`. Agents must implement the `step()` method to decide the next action based on the current state.

- **Actions and Observations**: Defined in `events/action` and `events/observation`, respectively. New actions or observations should extend the base classes and follow existing patterns.

- **Code Style**:

  - Follow **PEP 8** guidelines for Python code.
  - Use **4 spaces** for indentation.
  - Limit lines to a maximum of **79 characters**.
  - Ensure code is well-documented with docstrings and inline comments where necessary.

- **Prompt Templates**: Use Jinja2 templates for prompts. Templates are stored with `.j2` extensions and should be clearly named according to their purpose.

- **File Naming**:

  - Use lowercase letters and underscores for module and file names (e.g., `codeact_agent.py`).
  - Class names should follow **CapWords** (PascalCase) convention.

- **Function and Method Names**: Use lowercase letters and underscores (**snake_case**) for functions and methods.

- **Exception Handling**: Implement appropriate `try-except` blocks to handle potential errors, especially in code execution and LLM interactions.

- **Imports**:

  - Group imports in the following order: standard library, third-party libraries, local application imports.
  - Use absolute imports rather than relative imports.

- **Variables**:

  - Use descriptive variable names.
  - Constants should be defined at the module level and use **ALL_CAPS** naming.

## Guidelines for Other LLMs

- **Follow the Existing Architecture**: When contributing or modifying the codebase, adhere to the current architecture and extend existing classes where appropriate.

- **Respect Code Conventions**: Maintain consistency by following the code style and naming conventions outlined above.

- **Use Provided Functions**: Utilize existing utilities and functions instead of creating duplicates.

- **Avoid Unnecessary Research**: Focus on the task at hand using the provided codebase information. Do not introduce external concepts or overcomplicate solutions.

- **Adhere to the Execution Flow**: Ensure that any new code follows the established execution flow to maintain compatibility with the system.

- **Testing**:

  - Write unit tests for new functionalities where applicable to ensure code reliability.
  - Use the `unittest` framework and store tests in a `tests` directory.

- **Documentation**:

  - Update or create docstrings for new modules, classes, and functions.
  - Keep the documentation up to date with code changes.

- **Collaboration**:

  - Follow version control best practices (e.g., meaningful commit messages).
  - Use branches for new features and create pull requests for merging.

## Key Files

- `openhands/agenthub/codeact_agent/codeact_agent.py`: Implements the `CodeActAgent` class with methods for planning and executing steps.
- `openhands/agenthub/codeact_swe_agent/codeact_swe_agent.py`: Specialized agent for solving GitHub issues.
- `openhands/agenthub/codeact_agent/function_calling.py`: Handles function calling mechanisms for the agent.
- `openhands/agenthub/codeact_agent/system_prompt.j2`: Jinja2 template for the agent's system prompt.
- `openhands/agenthub/micro/coder/prompt.md`: Contains prompts used by micro-agents for specific tasks.
- `openhands/controller/agent.py`: Defines the `Agent` abstract base class.
- `openhands/events/action.py`: Contains action classes that agents can produce.
- `openhands/events/observation.py`: Contains observation classes resulting from action execution.
- `README.md`: Provides detailed explanations and documentation for the agent and its functionalities.

## Notes

- **Function Calling**: The agent uses function calling if supported by the LLM, enhancing its ability to perform complex actions.

- **Error Handling**: Implement error handling to manage exceptions and ensure smooth execution.

- **Agent Delegation**: The system supports multiple agents and can delegate tasks between them.

- **Plugins**: Use plugins to extend the agent's capabilities without modifying the core architecture. For example, `AgentSkillsRequirement` provides additional functions within the agent's environment.

- **Sandboxing**: Code execution occurs within a sandboxed environment to ensure security and isolation.

# Purpose

The `.cursorrules` file provides an overview of the codebase and its architecture to help other LLMs understand the structure, main components, and conventions. This assists in tasks such as code generation, analysis, and modification within the codebase while ensuring consistency and adherence to established guidelines.
